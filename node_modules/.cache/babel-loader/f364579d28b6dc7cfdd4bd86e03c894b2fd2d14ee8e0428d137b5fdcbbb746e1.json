{"ast":null,"code":"/**\r\n * Access recommendations on AniList\r\n * @since 1.8.0\r\n * @memberof AniList\r\n */\nclass Recommendation {\n  /**\r\n   * @description This constructor is meant for internal use and is apart of initializing. You cannot access this\r\n   * through the AniList class and are not expect to.\r\n   * @param { Utilities } utilities - The AniList Utilities class.\r\n   * @hideconstructor\r\n   */\n  constructor(utilities) {\n    this.util = utilities;\n  }\n\n  /**\r\n   * Get AniList recommendations for a media.\r\n   * @param {Number} mediaID The AniList media ID\r\n   * @param {Number} page Target a specific page number for recommended.\r\n   * @param {Number} perPage Limits the page amount to a specific number. 25 is max as per AniList limits.\r\n   * @returns {RecommendationList}\r\n   * @since 1.8.0\r\n   */\n  getList(mediaID) {\n    let page = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    let perPage = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 25;\n    if (typeof mediaID !== \"number\") {\n      throw new Error(\"mediaID is not a number type!\");\n    }\n    if (typeof page !== \"number\") {\n      throw new Error(\"page is not a number type!\");\n    }\n    if (typeof perPage !== \"number\") {\n      throw new Error(\"perPage is not a number type!\");\n    }\n    const recommendQuery = `query ($page: Int, $perPage: Int, $id: Int) { Recommendation (mediaId: $id) {\n            media { id title { romaji english native userPreferred } type } }\n            Page(page: $page, perPage: $perPage) { recommendations(mediaId: $id, sort: RATING_DESC) {\n            rating userRating user { id name } id\n            mediaRecommendation { id title { romaji english native userPreferred } type } } } }`;\n    return this.util.send(recommendQuery, {\n      id: mediaID,\n      page: page,\n      perPage: perPage\n    });\n  }\n\n  /**\r\n   * Get an AniList recommendation via its ID\r\n   * @param {Number} recommendID The AniList recommendation ID\r\n   * @returns {SingleRecommendation}\r\n   * @since 1.8.0\r\n   */\n  get(recommendID) {\n    if (typeof recommendID !== \"number\") {\n      throw new Error(\"recommendID is not a number type!\");\n    }\n    const recommendQuery = `query ($id: Int) { Recommendation (id: $id) {\n            id rating userRating\n            media { id title { romaji english native userPreferred } type } \n            mediaRecommendation { id title { romaji english native userPreferred } type }\n            user { id name } } }`;\n    return this.util.send(recommendQuery, {\n      id: recommendID\n    }).then(data => {\n      return data.Recommendation;\n    });\n  }\n}\nmodule.exports = Recommendation;","map":{"version":3,"names":["Recommendation","constructor","utilities","util","getList","mediaID","page","perPage","Error","recommendQuery","send","id","get","recommendID","then","data","module","exports"],"sources":["C:/Users/Ethan Liu/Desktop/repos/lightnovel-react/node_modules/anilist-node/lib/recommendation.js"],"sourcesContent":["/**\r\n * Access recommendations on AniList\r\n * @since 1.8.0\r\n * @memberof AniList\r\n */\r\nclass Recommendation {\r\n\t/**\r\n\t * @description This constructor is meant for internal use and is apart of initializing. You cannot access this\r\n\t * through the AniList class and are not expect to.\r\n\t * @param { Utilities } utilities - The AniList Utilities class.\r\n\t * @hideconstructor\r\n\t */\r\n\tconstructor(utilities) {\r\n\t\tthis.util = utilities;\r\n\t}\r\n\r\n\t/**\r\n\t * Get AniList recommendations for a media.\r\n\t * @param {Number} mediaID The AniList media ID\r\n\t * @param {Number} page Target a specific page number for recommended.\r\n\t * @param {Number} perPage Limits the page amount to a specific number. 25 is max as per AniList limits.\r\n\t * @returns {RecommendationList}\r\n\t * @since 1.8.0\r\n\t */\r\n\tgetList(mediaID, page = 1, perPage = 25) {\r\n\t\tif (typeof mediaID !== \"number\") {\r\n\t\t\tthrow new Error(\"mediaID is not a number type!\");\r\n\t\t}\r\n\t\tif (typeof page !== \"number\") {\r\n\t\t\tthrow new Error(\"page is not a number type!\");\r\n\t\t}\r\n\t\tif (typeof perPage !== \"number\") {\r\n\t\t\tthrow new Error(\"perPage is not a number type!\");\r\n\t\t}\r\n\r\n\t\tconst recommendQuery = `query ($page: Int, $perPage: Int, $id: Int) { Recommendation (mediaId: $id) {\r\n            media { id title { romaji english native userPreferred } type } }\r\n            Page(page: $page, perPage: $perPage) { recommendations(mediaId: $id, sort: RATING_DESC) {\r\n            rating userRating user { id name } id\r\n            mediaRecommendation { id title { romaji english native userPreferred } type } } } }`;\r\n\r\n\t\treturn this.util.send(recommendQuery, { id: mediaID, page: page, perPage: perPage });\r\n\t}\r\n\r\n\t/**\r\n\t * Get an AniList recommendation via its ID\r\n\t * @param {Number} recommendID The AniList recommendation ID\r\n\t * @returns {SingleRecommendation}\r\n\t * @since 1.8.0\r\n\t */\r\n\tget(recommendID) {\r\n\t\tif (typeof recommendID !== \"number\") {\r\n\t\t\tthrow new Error(\"recommendID is not a number type!\");\r\n\t\t}\r\n\r\n\t\tconst recommendQuery = `query ($id: Int) { Recommendation (id: $id) {\r\n            id rating userRating\r\n            media { id title { romaji english native userPreferred } type } \r\n            mediaRecommendation { id title { romaji english native userPreferred } type }\r\n            user { id name } } }`;\r\n\r\n\t\treturn this.util.send(recommendQuery, { id: recommendID }).then((data) => {\r\n\t\t\treturn data.Recommendation;\r\n\t\t});\r\n\t}\r\n}\r\n\r\nmodule.exports = Recommendation;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,MAAMA,cAAc,CAAC;EACpB;AACD;AACA;AACA;AACA;AACA;EACCC,WAAW,CAACC,SAAS,EAAE;IACtB,IAAI,CAACC,IAAI,GAAGD,SAAS;EACtB;;EAEA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;EACCE,OAAO,CAACC,OAAO,EAA0B;IAAA,IAAxBC,IAAI,uEAAG,CAAC;IAAA,IAAEC,OAAO,uEAAG,EAAE;IACtC,IAAI,OAAOF,OAAO,KAAK,QAAQ,EAAE;MAChC,MAAM,IAAIG,KAAK,CAAC,+BAA+B,CAAC;IACjD;IACA,IAAI,OAAOF,IAAI,KAAK,QAAQ,EAAE;MAC7B,MAAM,IAAIE,KAAK,CAAC,4BAA4B,CAAC;IAC9C;IACA,IAAI,OAAOD,OAAO,KAAK,QAAQ,EAAE;MAChC,MAAM,IAAIC,KAAK,CAAC,+BAA+B,CAAC;IACjD;IAEA,MAAMC,cAAc,GAAI;AAC1B;AACA;AACA;AACA,gGAAgG;IAE9F,OAAO,IAAI,CAACN,IAAI,CAACO,IAAI,CAACD,cAAc,EAAE;MAAEE,EAAE,EAAEN,OAAO;MAAEC,IAAI,EAAEA,IAAI;MAAEC,OAAO,EAAEA;IAAQ,CAAC,CAAC;EACrF;;EAEA;AACD;AACA;AACA;AACA;AACA;EACCK,GAAG,CAACC,WAAW,EAAE;IAChB,IAAI,OAAOA,WAAW,KAAK,QAAQ,EAAE;MACpC,MAAM,IAAIL,KAAK,CAAC,mCAAmC,CAAC;IACrD;IAEA,MAAMC,cAAc,GAAI;AAC1B;AACA;AACA;AACA,iCAAiC;IAE/B,OAAO,IAAI,CAACN,IAAI,CAACO,IAAI,CAACD,cAAc,EAAE;MAAEE,EAAE,EAAEE;IAAY,CAAC,CAAC,CAACC,IAAI,CAAEC,IAAI,IAAK;MACzE,OAAOA,IAAI,CAACf,cAAc;IAC3B,CAAC,CAAC;EACH;AACD;AAEAgB,MAAM,CAACC,OAAO,GAAGjB,cAAc"},"metadata":{},"sourceType":"script","externalDependencies":[]}