{"ast":null,"code":"const fetcher = require(\"./fetcher\").send;\n\n/**\r\n * @description A private class to take care of common methods in the package\r\n * @private\r\n * @since 1.5.0\r\n */\nclass Utilities {\n  /**\r\n   * @constructor\r\n   * @param {String} [accessKey] - The AniList API token.\r\n   * @param {Object} [options] - Optional options used while getting info from AniList\r\n   */\n  constructor(accessKey, options) {\n    this.key = accessKey;\n    this.options = options;\n  }\n\n  /**\r\n   * Generate the appropriate query header for the query.\r\n   *\r\n   * @param { String } type - The query type of the header. (ie: User or Character)\r\n   * @param { Number|String } id - The search term for the query.\r\n   * @param { String } addItm - An additional item to add to the search variables.\r\n   * @returns { Object[] } Returns an array. Index 0 is the search variables and Index 1\r\n   *      is the query header string.\r\n   * @since 1.5.0\r\n   */\n  generateQueryHeaders(type, item, addItm) {\n    // A search term is needed. Throw an error.\n    if (!item) {\n      throw new Error(\"A term is not provided!\");\n    }\n    if (addItm && typeof addItm !== \"string\") {\n      throw new Error(\"The additional item in the query must be a string!\");\n    }\n    switch (typeof item) {\n      case \"number\":\n        switch (type) {\n          case \"MediaListCollection\":\n            return [{\n              id: item,\n              type: addItm\n            }, \"query ($id: Int, $type: MediaType) { MediaListCollection(userId: $id, type: $type) {\"];\n          case \"User\":\n          case \"Staff\":\n          case \"Character\":\n          case \"Studio\":\n          case \"Activity\":\n          case \"Thread\":\n            return [{\n              id: item\n            }, `query ($id: Int) { ${type} (id: $id) { `];\n          default:\n            throw new Error(\"This type doesn't have a query assigned to it!\");\n        }\n      case \"string\":\n        switch (type) {\n          case \"MediaListCollection\":\n            return [{\n              name: item,\n              type: addItm\n            }, \"query ($name: String, $type: MediaType) { MediaListCollection(userName: $name, type: $type) {\"];\n          case \"User\":\n            return [{\n              name: item\n            }, \"query ($name: String) { User (name: $name) { \"];\n          // Both staff and character need the same query header.\n          case \"Staff\":\n          case \"Character\":\n          case \"Studio\":\n            return [{\n              search: item\n            }, `query ($search: String) { ${type} (search: $search) { `];\n          default:\n            throw new Error(\"This type doesn't have a query assigned to it!\");\n        }\n      default:\n        throw new Error(\"Term does not match the required types!\");\n    }\n  }\n}\n\n/**\r\n * Send a call to the AniList API with a query and variables.\r\n * @param { String } query - The query to send to the AniList API\r\n * @param { Object } variables - Any variables required such as a username or ID\r\n * @returns { Object } Returns a customized object containing all of the data fetched.\r\n * @since 1.0.0\r\n */\nUtilities.prototype.send = fetcher;\nmodule.exports = Utilities;","map":{"version":3,"names":["fetcher","require","send","Utilities","constructor","accessKey","options","key","generateQueryHeaders","type","item","addItm","Error","id","name","search","prototype","module","exports"],"sources":["C:/Users/Ethan Liu/Desktop/repos/lightnovel-react/node_modules/anilist-node/lib/utilities.js"],"sourcesContent":["const fetcher = require(\"./fetcher\").send;\r\n\r\n/**\r\n * @description A private class to take care of common methods in the package\r\n * @private\r\n * @since 1.5.0\r\n */\r\nclass Utilities {\r\n\t/**\r\n\t * @constructor\r\n\t * @param {String} [accessKey] - The AniList API token.\r\n\t * @param {Object} [options] - Optional options used while getting info from AniList\r\n\t */\r\n\tconstructor(accessKey, options) {\r\n\t\tthis.key = accessKey;\r\n\t\tthis.options = options;\r\n\t}\r\n\r\n\t/**\r\n\t * Generate the appropriate query header for the query.\r\n\t *\r\n\t * @param { String } type - The query type of the header. (ie: User or Character)\r\n\t * @param { Number|String } id - The search term for the query.\r\n\t * @param { String } addItm - An additional item to add to the search variables.\r\n\t * @returns { Object[] } Returns an array. Index 0 is the search variables and Index 1\r\n\t *      is the query header string.\r\n\t * @since 1.5.0\r\n\t */\r\n\tgenerateQueryHeaders(type, item, addItm) {\r\n\t\t// A search term is needed. Throw an error.\r\n\t\tif (!item) {\r\n\t\t\tthrow new Error(\"A term is not provided!\");\r\n\t\t}\r\n\t\tif (addItm && typeof addItm !== \"string\") {\r\n\t\t\tthrow new Error(\"The additional item in the query must be a string!\");\r\n\t\t}\r\n\r\n\t\tswitch (typeof item) {\r\n\t\t\tcase \"number\":\r\n\t\t\t\tswitch (type) {\r\n\t\t\t\t\tcase \"MediaListCollection\":\r\n\t\t\t\t\t\treturn [\r\n\t\t\t\t\t\t\t{ id: item, type: addItm },\r\n\t\t\t\t\t\t\t\"query ($id: Int, $type: MediaType) { MediaListCollection(userId: $id, type: $type) {\"\r\n\t\t\t\t\t\t];\r\n\t\t\t\t\tcase \"User\":\r\n\t\t\t\t\tcase \"Staff\":\r\n\t\t\t\t\tcase \"Character\":\r\n\t\t\t\t\tcase \"Studio\":\r\n\t\t\t\t\tcase \"Activity\":\r\n\t\t\t\t\tcase \"Thread\":\r\n\t\t\t\t\t\treturn [{ id: item }, `query ($id: Int) { ${type} (id: $id) { `];\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tthrow new Error(\"This type doesn't have a query assigned to it!\");\r\n\t\t\t\t}\r\n\t\t\tcase \"string\":\r\n\t\t\t\tswitch (type) {\r\n\t\t\t\t\tcase \"MediaListCollection\":\r\n\t\t\t\t\t\treturn [\r\n\t\t\t\t\t\t\t{ name: item, type: addItm },\r\n\t\t\t\t\t\t\t\"query ($name: String, $type: MediaType) { MediaListCollection(userName: $name, type: $type) {\"\r\n\t\t\t\t\t\t];\r\n\t\t\t\t\tcase \"User\":\r\n\t\t\t\t\t\treturn [{ name: item }, \"query ($name: String) { User (name: $name) { \"];\r\n\t\t\t\t\t// Both staff and character need the same query header.\r\n\t\t\t\t\tcase \"Staff\":\r\n\t\t\t\t\tcase \"Character\":\r\n\t\t\t\t\tcase \"Studio\":\r\n\t\t\t\t\t\treturn [{ search: item }, `query ($search: String) { ${type} (search: $search) { `];\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tthrow new Error(\"This type doesn't have a query assigned to it!\");\r\n\t\t\t\t}\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(\"Term does not match the required types!\");\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Send a call to the AniList API with a query and variables.\r\n * @param { String } query - The query to send to the AniList API\r\n * @param { Object } variables - Any variables required such as a username or ID\r\n * @returns { Object } Returns a customized object containing all of the data fetched.\r\n * @since 1.0.0\r\n */\r\nUtilities.prototype.send = fetcher;\r\n\r\nmodule.exports = Utilities;\r\n"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,WAAW,CAAC,CAACC,IAAI;;AAEzC;AACA;AACA;AACA;AACA;AACA,MAAMC,SAAS,CAAC;EACf;AACD;AACA;AACA;AACA;EACCC,WAAW,CAACC,SAAS,EAAEC,OAAO,EAAE;IAC/B,IAAI,CAACC,GAAG,GAAGF,SAAS;IACpB,IAAI,CAACC,OAAO,GAAGA,OAAO;EACvB;;EAEA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACCE,oBAAoB,CAACC,IAAI,EAAEC,IAAI,EAAEC,MAAM,EAAE;IACxC;IACA,IAAI,CAACD,IAAI,EAAE;MACV,MAAM,IAAIE,KAAK,CAAC,yBAAyB,CAAC;IAC3C;IACA,IAAID,MAAM,IAAI,OAAOA,MAAM,KAAK,QAAQ,EAAE;MACzC,MAAM,IAAIC,KAAK,CAAC,oDAAoD,CAAC;IACtE;IAEA,QAAQ,OAAOF,IAAI;MAClB,KAAK,QAAQ;QACZ,QAAQD,IAAI;UACX,KAAK,qBAAqB;YACzB,OAAO,CACN;cAAEI,EAAE,EAAEH,IAAI;cAAED,IAAI,EAAEE;YAAO,CAAC,EAC1B,sFAAsF,CACtF;UACF,KAAK,MAAM;UACX,KAAK,OAAO;UACZ,KAAK,WAAW;UAChB,KAAK,QAAQ;UACb,KAAK,UAAU;UACf,KAAK,QAAQ;YACZ,OAAO,CAAC;cAAEE,EAAE,EAAEH;YAAK,CAAC,EAAG,sBAAqBD,IAAK,eAAc,CAAC;UACjE;YACC,MAAM,IAAIG,KAAK,CAAC,gDAAgD,CAAC;QAAC;MAErE,KAAK,QAAQ;QACZ,QAAQH,IAAI;UACX,KAAK,qBAAqB;YACzB,OAAO,CACN;cAAEK,IAAI,EAAEJ,IAAI;cAAED,IAAI,EAAEE;YAAO,CAAC,EAC5B,+FAA+F,CAC/F;UACF,KAAK,MAAM;YACV,OAAO,CAAC;cAAEG,IAAI,EAAEJ;YAAK,CAAC,EAAE,+CAA+C,CAAC;UACzE;UACA,KAAK,OAAO;UACZ,KAAK,WAAW;UAChB,KAAK,QAAQ;YACZ,OAAO,CAAC;cAAEK,MAAM,EAAEL;YAAK,CAAC,EAAG,6BAA4BD,IAAK,uBAAsB,CAAC;UACpF;YACC,MAAM,IAAIG,KAAK,CAAC,gDAAgD,CAAC;QAAC;MAErE;QACC,MAAM,IAAIA,KAAK,CAAC,yCAAyC,CAAC;IAAC;EAE9D;AACD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACAT,SAAS,CAACa,SAAS,CAACd,IAAI,GAAGF,OAAO;AAElCiB,MAAM,CAACC,OAAO,GAAGf,SAAS"},"metadata":{},"sourceType":"script","externalDependencies":[]}