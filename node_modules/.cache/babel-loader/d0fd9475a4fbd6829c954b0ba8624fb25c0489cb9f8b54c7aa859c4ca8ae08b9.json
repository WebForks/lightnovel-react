{"ast":null,"code":"const headerBuilder = require(\"./utils/headerBuilder\");\n\n/**\r\n * Access a user's AniList list data.\r\n * @since 1.1.0\r\n * @memberof AniList\r\n */\nclass Lists {\n  /**\r\n   * @description This constructor is meant for internal use and is apart of initializing. You cannot access this\r\n   * through the AniList class and are not expect to.\r\n   * @param { Utilities } utilities - The AniList Utilities class.\r\n   * @hideconstructor\r\n   */\n  constructor(utilities) {\n    this.util = utilities;\n  }\n\n  /**\r\n   * Fetch a user's AniList anime lists.\r\n   * @param { Number | String } user - Required. Can either be the username or the AniList ID.\r\n   * @returns { UserList }\r\n   * @since 1.1.0\r\n   */\n  anime(user) {\n    let queryVars = this.util.generateQueryHeaders(\"MediaListCollection\", user, \"ANIME\");\n    return this.util.send(queryVars[1] + `lists { name isCustomList isSplitCompletedList status entries { id\n            media { id idMal title { romaji english native userPreferred } \n            episodes description format startDate { year month day } endDate { year month day }\n            duration genres synonyms tags { name isMediaSpoiler } isFavourite isAdult siteUrl }\n            status score progress repeat priority private notes hiddenFromStatusLists\n            advancedScores startedAt { year month day } completedAt { year month day } updatedAt createdAt } } } }`, queryVars[0]);\n  }\n\n  /**\r\n   * [Requires Login] Add an entry to a user's list.\r\n   * @param {Number} id - The AniList ID of the entry to add\r\n   * @param {UpdateEntryOptions} options - Values to save with.\r\n   * @returns {UpdatedEntry}\r\n   * @since 1.13.0\r\n   */\n  async addEntry(id, options) {\n    if (typeof id !== \"number\") {\n      throw new Error(\"Provided ID is not a number!\");\n    }\n    if (typeof options !== \"object\") {\n      throw new Error(\"Provide options is not an object!\");\n    }\n    options.mediaId = id;\n    let query = headerBuilder(\"mutation\", \"SaveMediaListEntry\", options);\n    query += `id mediaId status score progress progressVolumes repeat priority private \n\t\thiddenFromStatusLists customLists startedAt { year month day } completedAt { year month day } notes advancedScores }}`;\n    return this.util.send(query).then(data => {\n      return data.SaveMediaListEntry;\n    });\n  }\n\n  /**\r\n   * Fetch a user's AniList manga lists.\r\n   * @param { Number | String } user - Required. Can either be the username or the AniList ID.\r\n   * @returns { UserList }\r\n   * @since 1.1.0\r\n   */\n  manga(user) {\n    let queryVars = this.util.generateQueryHeaders(\"MediaListCollection\", user, \"MANGA\");\n    return this.util.send(queryVars[1] + `lists { name isCustomList isSplitCompletedList status entries { id\n            media { id idMal title { romaji english native userPreferred } \n            volumes chapters description format startDate { year month day } endDate { year month day }\n            genres synonyms tags { name isMediaSpoiler } isFavourite isAdult siteUrl }\n            status score progress progressVolumes repeat priority private notes hiddenFromStatusLists\n            advancedScores startedAt { year month day } completedAt { year month day } updatedAt createdAt } } } }`, queryVars[0]);\n  }\n\n  /**\r\n   * [Requires Login] Update a list entry to a user's list.\r\n   * @param {Number} id - The AniList list ID of the entry to edit.\r\n   * @param {UpdateEntryOptions} options - Values to save with.\r\n   * @returns {UpdatedEntry}\r\n   * @since 1.13.0\r\n   */\n  async updateEntry(id, options) {\n    if (typeof id !== \"number\") {\n      throw new Error(\"Provided ID is not a number!\");\n    }\n    if (typeof options !== \"object\") {\n      throw new Error(\"Provide options is not an object!\");\n    }\n    options.id = id;\n    let query = headerBuilder(\"mutation\", \"SaveMediaListEntry\", options);\n    query += `id mediaId status score progress progressVolumes repeat priority private \n\t\thiddenFromStatusLists customLists startedAt { year month day } completedAt { year month day } notes advancedScores }}`;\n    return this.util.send(query).then(data => {\n      return data.SaveMediaListEntry;\n    });\n  }\n\n  /**\r\n   * [Requires Login] Remove an entry from a user's lists.\r\n   * @param {Number} id - The AniList list ID of the entry to remove.\r\n   * @returns {Boolean} Returns true if removed, false otherwise.\r\n   * @since 1.13.0\r\n   */\n  async removeEntry(id) {\n    if (typeof id !== \"number\") {\n      throw new Error(\"Provided ID is not a number!\");\n    }\n    const query = `mutation { DeleteMediaListEntry(id:${id}) { deleted } }`;\n    return this.util.send(query).then(data => {\n      return data.DeleteMediaListEntry.deleted;\n    });\n  }\n}\nmodule.exports = Lists;","map":{"version":3,"names":["headerBuilder","require","Lists","constructor","utilities","util","anime","user","queryVars","generateQueryHeaders","send","addEntry","id","options","Error","mediaId","query","then","data","SaveMediaListEntry","manga","updateEntry","removeEntry","DeleteMediaListEntry","deleted","module","exports"],"sources":["C:/Users/Ethan Liu/Desktop/repos/lightnovel-react/node_modules/anilist-node/lib/lists.js"],"sourcesContent":["const headerBuilder = require(\"./utils/headerBuilder\");\r\n\r\n/**\r\n * Access a user's AniList list data.\r\n * @since 1.1.0\r\n * @memberof AniList\r\n */\r\nclass Lists {\r\n\t/**\r\n\t * @description This constructor is meant for internal use and is apart of initializing. You cannot access this\r\n\t * through the AniList class and are not expect to.\r\n\t * @param { Utilities } utilities - The AniList Utilities class.\r\n\t * @hideconstructor\r\n\t */\r\n\tconstructor(utilities) {\r\n\t\tthis.util = utilities;\r\n\t}\r\n\r\n\t/**\r\n\t * Fetch a user's AniList anime lists.\r\n\t * @param { Number | String } user - Required. Can either be the username or the AniList ID.\r\n\t * @returns { UserList }\r\n\t * @since 1.1.0\r\n\t */\r\n\tanime(user) {\r\n\t\tlet queryVars = this.util.generateQueryHeaders(\"MediaListCollection\", user, \"ANIME\");\r\n\r\n\t\treturn this.util.send(\r\n\t\t\tqueryVars[1] +\r\n\t\t\t\t`lists { name isCustomList isSplitCompletedList status entries { id\r\n            media { id idMal title { romaji english native userPreferred } \r\n            episodes description format startDate { year month day } endDate { year month day }\r\n            duration genres synonyms tags { name isMediaSpoiler } isFavourite isAdult siteUrl }\r\n            status score progress repeat priority private notes hiddenFromStatusLists\r\n            advancedScores startedAt { year month day } completedAt { year month day } updatedAt createdAt } } } }`,\r\n\t\t\tqueryVars[0]\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * [Requires Login] Add an entry to a user's list.\r\n\t * @param {Number} id - The AniList ID of the entry to add\r\n\t * @param {UpdateEntryOptions} options - Values to save with.\r\n\t * @returns {UpdatedEntry}\r\n\t * @since 1.13.0\r\n\t */\r\n\tasync addEntry(id, options) {\r\n\t\tif (typeof id !== \"number\") {\r\n\t\t\tthrow new Error(\"Provided ID is not a number!\");\r\n\t\t}\r\n\t\tif (typeof options !== \"object\") {\r\n\t\t\tthrow new Error(\"Provide options is not an object!\");\r\n\t\t}\r\n\r\n\t\toptions.mediaId = id;\r\n\r\n\t\tlet query = headerBuilder(\"mutation\", \"SaveMediaListEntry\", options);\r\n\r\n\t\tquery += `id mediaId status score progress progressVolumes repeat priority private \r\n\t\thiddenFromStatusLists customLists startedAt { year month day } completedAt { year month day } notes advancedScores }}`;\r\n\r\n\t\treturn this.util.send(query).then((data) => {\r\n\t\t\treturn data.SaveMediaListEntry;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Fetch a user's AniList manga lists.\r\n\t * @param { Number | String } user - Required. Can either be the username or the AniList ID.\r\n\t * @returns { UserList }\r\n\t * @since 1.1.0\r\n\t */\r\n\tmanga(user) {\r\n\t\tlet queryVars = this.util.generateQueryHeaders(\"MediaListCollection\", user, \"MANGA\");\r\n\r\n\t\treturn this.util.send(\r\n\t\t\tqueryVars[1] +\r\n\t\t\t\t`lists { name isCustomList isSplitCompletedList status entries { id\r\n            media { id idMal title { romaji english native userPreferred } \r\n            volumes chapters description format startDate { year month day } endDate { year month day }\r\n            genres synonyms tags { name isMediaSpoiler } isFavourite isAdult siteUrl }\r\n            status score progress progressVolumes repeat priority private notes hiddenFromStatusLists\r\n            advancedScores startedAt { year month day } completedAt { year month day } updatedAt createdAt } } } }`,\r\n\t\t\tqueryVars[0]\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * [Requires Login] Update a list entry to a user's list.\r\n\t * @param {Number} id - The AniList list ID of the entry to edit.\r\n\t * @param {UpdateEntryOptions} options - Values to save with.\r\n\t * @returns {UpdatedEntry}\r\n\t * @since 1.13.0\r\n\t */\r\n\tasync updateEntry(id, options) {\r\n\t\tif (typeof id !== \"number\") {\r\n\t\t\tthrow new Error(\"Provided ID is not a number!\");\r\n\t\t}\r\n\t\tif (typeof options !== \"object\") {\r\n\t\t\tthrow new Error(\"Provide options is not an object!\");\r\n\t\t}\r\n\r\n\t\toptions.id = id;\r\n\r\n\t\tlet query = headerBuilder(\"mutation\", \"SaveMediaListEntry\", options);\r\n\r\n\t\tquery += `id mediaId status score progress progressVolumes repeat priority private \r\n\t\thiddenFromStatusLists customLists startedAt { year month day } completedAt { year month day } notes advancedScores }}`;\r\n\r\n\t\treturn this.util.send(query).then((data) => {\r\n\t\t\treturn data.SaveMediaListEntry;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * [Requires Login] Remove an entry from a user's lists.\r\n\t * @param {Number} id - The AniList list ID of the entry to remove.\r\n\t * @returns {Boolean} Returns true if removed, false otherwise.\r\n\t * @since 1.13.0\r\n\t */\r\n\tasync removeEntry(id) {\r\n\t\tif (typeof id !== \"number\") {\r\n\t\t\tthrow new Error(\"Provided ID is not a number!\");\r\n\t\t}\r\n\r\n\t\tconst query = `mutation { DeleteMediaListEntry(id:${id}) { deleted } }`;\r\n\r\n\t\treturn this.util.send(query).then((data) => {\r\n\t\t\treturn data.DeleteMediaListEntry.deleted;\r\n\t\t});\r\n\t}\r\n}\r\n\r\nmodule.exports = Lists;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}