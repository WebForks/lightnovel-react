{"ast":null,"code":"const {\n  TextActivityQuery,\n  MessageActivityQuery,\n  ListActivityQuery\n} = require(\"./consts\");\n\n/**\r\n * Access activities on AniList\r\n * @since 1.7.0\r\n * @memberof AniList\r\n */\nclass Activity {\n  /**\r\n   * @description This constructor is meant for internal use and is apart of initializing. You cannot access this\r\n   * through the AniList class and are not expect to.\r\n   * @param { Utilities } utilities - The AniList Utilities class.\r\n   * @hideconstructor\r\n   */\n  constructor(utilities) {\n    this.util = utilities;\n  }\n\n  /**\r\n   * Get a specific AniList activity by its ID.\r\n   * @param {Number} activityID The AniList activity ID\r\n   * @returns { ListActivity | TextActivity | MessageActivity } Returns the activity information. Activity will either appear as:\r\n   * {@link ListActivity}, {@link TextActivity}, {@link MessageActivity}. All of which are identifiable by the type key.\r\n   * @since 1.7.0\r\n   */\n  get(activityID) {\n    const queryVars = this.util.generateQueryHeaders(\"Activity\", activityID);\n    return this.util.send(queryVars[1] + `... on ListActivity {\n                ${ListActivityQuery}\n            }\n            ... on TextActivity {\n                ${TextActivityQuery}\n            }\n            ... on MessageActivity {\n                ${MessageActivityQuery}\n            }}}`, queryVars[0]).then(data => {\n      return data.Activity;\n    });\n  }\n\n  /**\r\n   * Fetch activities from a user.\r\n   * @param {Number} user - Required. Needs to be the user's AniList ID.\r\n   * @param {Number} page - The page number to display\r\n   * @param {Number} perPage - How many entries to display on one page. (Max is 25 per AniList limit)\r\n   * @returns { Object[] } Returns a list of user activities based on the page & perPage values Contains any number of\r\n   * {@link ListActivity}, {@link TextActivity}, {@link MessageActivity}. All of which are identifiable by the type key.\r\n   *\r\n   * @since 1.7.0\r\n   */\n  getUserActivity(user) {\n    let page = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    let perPage = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 25;\n    if (typeof user !== \"number\" || typeof page !== \"number\" || typeof perPage !== \"number\") {\n      throw new Error(\"Term does not match the required type!\");\n    }\n    return this.util.send(`query ($page: Int, $perPage: Int, $user: Int) {\n            Page (page: $page, perPage: $perPage) { pageInfo { total currentPage lastPage hasNextPage perPage } \n            activities(userId: $user, sort:ID_DESC) {\n                ... on ListActivity { ${ListActivityQuery} }\n                ... on TextActivity { ${TextActivityQuery} }\n                ... on MessageActivity { ${MessageActivityQuery} }\n            } } }`, {\n      user: user,\n      page: page,\n      perPage: perPage\n    }).then(data => {\n      return data;\n    });\n  }\n\n  /**\r\n   * [Require Login] Post a new text activity or update the activity with its ID\r\n   * @param {String} text - The content of the activity.\r\n   * @param {Number?} id - The AniList activity ID. Null to create, number for update\r\n   *\r\n   * @returns {TextActivity}\r\n   * @since 1.11.0\r\n   */\n  async postText(text, id) {\n    if (typeof text !== \"string\") {\n      throw new Error(\"Text is not a string type.\");\n    }\n    if (id && typeof id !== \"number\") {\n      throw new Error(\"Provided ID is not a number type.\");\n    }\n    const data = await this.util.send(`mutation ($id: Int, $text: String) {\n\t\t\t\tSaveTextActivity(id: $id, text: $text) {\n\t\t\t\t${TextActivityQuery}\n\t\t\t} }`, {\n      id: id,\n      text: text\n    });\n    return data.SaveTextActivity;\n  }\n\n  /**\r\n   * [Require Login] Post a new message activity or update the activity with its ID\r\n   * @param {String} text - The activity message text\r\n   * @param {Number} recipientId - The target user to send the message to\r\n   * @param {Boolean} isPrivate - Set to true if it is a private message\r\n   * @param {Number?} id - AniList Activity ID. Null to create, number to update.\r\n   *\r\n   * @returns {MessageActivity}\r\n   * @since 1.11.0\r\n   */\n  async postMessage(text, recipientId) {\n    let isPrivate = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    let id = arguments.length > 3 ? arguments[3] : undefined;\n    if (typeof text !== \"string\") {\n      throw new Error(\"Text is not a string type.\");\n    }\n    if (typeof recipientId !== \"number\") {\n      throw new Error(\"Recipient ID is not a number type.\");\n    }\n    if (id && typeof id !== \"number\") {\n      throw new Error(\"Provided ID is not a number type.\");\n    }\n    const data = await this.util.send(`mutation ($id: Int, $text: String, $recipientId: Int, $private: Boolean) {\n\t\t\tSaveMessageActivity(message: $text, id: $id, recipientId: $recipientId, private: $private) {\n\t\t\t  ${MessageActivityQuery}\n\t\t\t} }`, {\n      id: id,\n      text: text,\n      recipientId: recipientId,\n      private: isPrivate\n    });\n    return data.SaveMessageActivity;\n  }\n\n  /**\r\n   * [Require Login] Delete the current authorized user's activity post\r\n   * @param {Number} id - The AniList activity ID to delete\r\n   *\r\n   * @returns {Boolean} Returns true if successful\r\n   * @since 1.11.0\r\n   */\n  async delete(id) {\n    if (typeof id !== \"number\") {\n      throw new Error(\"ID is not a number type.\");\n    }\n    const data = await this.util.send(`mutation ($id: Int) { DeleteActivity(id: $id) { deleted } }`, {\n      id: id\n    });\n    return data.DeleteActivity.deleted;\n  }\n}\nmodule.exports = Activity;","map":{"version":3,"names":["TextActivityQuery","MessageActivityQuery","ListActivityQuery","require","Activity","constructor","utilities","util","get","activityID","queryVars","generateQueryHeaders","send","then","data","getUserActivity","user","page","perPage","Error","postText","text","id","SaveTextActivity","postMessage","recipientId","isPrivate","private","SaveMessageActivity","delete","DeleteActivity","deleted","module","exports"],"sources":["C:/Users/Ethan Liu/Desktop/repos/lightnovel-react/node_modules/anilist-node/lib/activity.js"],"sourcesContent":["const { TextActivityQuery, MessageActivityQuery, ListActivityQuery } = require(\"./consts\");\r\n\r\n/**\r\n * Access activities on AniList\r\n * @since 1.7.0\r\n * @memberof AniList\r\n */\r\nclass Activity {\r\n\t/**\r\n\t * @description This constructor is meant for internal use and is apart of initializing. You cannot access this\r\n\t * through the AniList class and are not expect to.\r\n\t * @param { Utilities } utilities - The AniList Utilities class.\r\n\t * @hideconstructor\r\n\t */\r\n\tconstructor(utilities) {\r\n\t\tthis.util = utilities;\r\n\t}\r\n\r\n\t/**\r\n\t * Get a specific AniList activity by its ID.\r\n\t * @param {Number} activityID The AniList activity ID\r\n\t * @returns { ListActivity | TextActivity | MessageActivity } Returns the activity information. Activity will either appear as:\r\n\t * {@link ListActivity}, {@link TextActivity}, {@link MessageActivity}. All of which are identifiable by the type key.\r\n\t * @since 1.7.0\r\n\t */\r\n\tget(activityID) {\r\n\t\tconst queryVars = this.util.generateQueryHeaders(\"Activity\", activityID);\r\n\r\n\t\treturn this.util\r\n\t\t\t.send(\r\n\t\t\t\tqueryVars[1] +\r\n\t\t\t\t\t`... on ListActivity {\r\n                ${ListActivityQuery}\r\n            }\r\n            ... on TextActivity {\r\n                ${TextActivityQuery}\r\n            }\r\n            ... on MessageActivity {\r\n                ${MessageActivityQuery}\r\n            }}}`,\r\n\t\t\t\tqueryVars[0]\r\n\t\t\t)\r\n\t\t\t.then((data) => {\r\n\t\t\t\treturn data.Activity;\r\n\t\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Fetch activities from a user.\r\n\t * @param {Number} user - Required. Needs to be the user's AniList ID.\r\n\t * @param {Number} page - The page number to display\r\n\t * @param {Number} perPage - How many entries to display on one page. (Max is 25 per AniList limit)\r\n\t * @returns { Object[] } Returns a list of user activities based on the page & perPage values Contains any number of\r\n\t * {@link ListActivity}, {@link TextActivity}, {@link MessageActivity}. All of which are identifiable by the type key.\r\n\t *\r\n\t * @since 1.7.0\r\n\t */\r\n\tgetUserActivity(user, page = 1, perPage = 25) {\r\n\t\tif (typeof user !== \"number\" || typeof page !== \"number\" || typeof perPage !== \"number\") {\r\n\t\t\tthrow new Error(\"Term does not match the required type!\");\r\n\t\t}\r\n\r\n\t\treturn this.util\r\n\t\t\t.send(\r\n\t\t\t\t`query ($page: Int, $perPage: Int, $user: Int) {\r\n            Page (page: $page, perPage: $perPage) { pageInfo { total currentPage lastPage hasNextPage perPage } \r\n            activities(userId: $user, sort:ID_DESC) {\r\n                ... on ListActivity { ${ListActivityQuery} }\r\n                ... on TextActivity { ${TextActivityQuery} }\r\n                ... on MessageActivity { ${MessageActivityQuery} }\r\n            } } }`,\r\n\t\t\t\t{ user: user, page: page, perPage: perPage }\r\n\t\t\t)\r\n\t\t\t.then((data) => {\r\n\t\t\t\treturn data;\r\n\t\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * [Require Login] Post a new text activity or update the activity with its ID\r\n\t * @param {String} text - The content of the activity.\r\n\t * @param {Number?} id - The AniList activity ID. Null to create, number for update\r\n\t *\r\n\t * @returns {TextActivity}\r\n\t * @since 1.11.0\r\n\t */\r\n\tasync postText(text, id) {\r\n\t\tif (typeof text !== \"string\") {\r\n\t\t\tthrow new Error(\"Text is not a string type.\");\r\n\t\t}\r\n\t\tif (id && typeof id !== \"number\") {\r\n\t\t\tthrow new Error(\"Provided ID is not a number type.\");\r\n\t\t}\r\n\r\n\t\tconst data = await this.util.send(\r\n\t\t\t`mutation ($id: Int, $text: String) {\r\n\t\t\t\tSaveTextActivity(id: $id, text: $text) {\r\n\t\t\t\t${TextActivityQuery}\r\n\t\t\t} }`,\r\n\t\t\t{ id: id, text: text }\r\n\t\t);\r\n\t\treturn data.SaveTextActivity;\r\n\t}\r\n\r\n\t/**\r\n\t * [Require Login] Post a new message activity or update the activity with its ID\r\n\t * @param {String} text - The activity message text\r\n\t * @param {Number} recipientId - The target user to send the message to\r\n\t * @param {Boolean} isPrivate - Set to true if it is a private message\r\n\t * @param {Number?} id - AniList Activity ID. Null to create, number to update.\r\n\t *\r\n\t * @returns {MessageActivity}\r\n\t * @since 1.11.0\r\n\t */\r\n\tasync postMessage(text, recipientId, isPrivate = false, id) {\r\n\t\tif (typeof text !== \"string\") {\r\n\t\t\tthrow new Error(\"Text is not a string type.\");\r\n\t\t}\r\n\t\tif (typeof recipientId !== \"number\") {\r\n\t\t\tthrow new Error(\"Recipient ID is not a number type.\");\r\n\t\t}\r\n\t\tif (id && typeof id !== \"number\") {\r\n\t\t\tthrow new Error(\"Provided ID is not a number type.\");\r\n\t\t}\r\n\r\n\t\tconst data = await this.util.send(\r\n\t\t\t`mutation ($id: Int, $text: String, $recipientId: Int, $private: Boolean) {\r\n\t\t\tSaveMessageActivity(message: $text, id: $id, recipientId: $recipientId, private: $private) {\r\n\t\t\t  ${MessageActivityQuery}\r\n\t\t\t} }`,\r\n\t\t\t{ id: id, text: text, recipientId: recipientId, private: isPrivate }\r\n\t\t);\r\n\r\n\t\treturn data.SaveMessageActivity;\r\n\t}\r\n\r\n\t/**\r\n\t * [Require Login] Delete the current authorized user's activity post\r\n\t * @param {Number} id - The AniList activity ID to delete\r\n\t *\r\n\t * @returns {Boolean} Returns true if successful\r\n\t * @since 1.11.0\r\n\t */\r\n\tasync delete(id) {\r\n\t\tif (typeof id !== \"number\") {\r\n\t\t\tthrow new Error(\"ID is not a number type.\");\r\n\t\t}\r\n\r\n\t\tconst data = await this.util.send(`mutation ($id: Int) { DeleteActivity(id: $id) { deleted } }`, { id: id });\r\n\r\n\t\treturn data.DeleteActivity.deleted;\r\n\t}\r\n}\r\n\r\nmodule.exports = Activity;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}