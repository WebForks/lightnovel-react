{"ast":null,"code":"/**\r\n * Access AniList's characters and staff data.\r\n * @since 1.0.0\r\n * @memberof AniList\r\n */\nclass People {\n  /**\r\n   * @description This constructor is meant for internal use and is apart of initializing. You cannot access this\r\n   * through the AniList class and are not expect to.\r\n   * @param { Utilities } utilities - The AniList Utilities class.\r\n   * @hideconstructor\r\n   */\n  constructor(utilities) {\n    this.util = utilities;\n  }\n\n  /**\r\n   * Fetch a character entry by its AniList ID.\r\n   * @param { Number|String } id - Required. The ID tied to the AniList entry.\r\n   * @returns { CharacterEntry }\r\n   * @since 1.0.0\r\n   */\n  character(id) {\n    let queryVars = this.util.generateQueryHeaders(\"Character\", id);\n    return this.util.send(queryVars[1] + `id name { english: full native alternative } image { large medium } \n        description isFavourite favourites siteUrl \n        media { nodes { id title { romaji english native userPreferred } type } } } }`, queryVars[0]);\n  }\n\n  /**\r\n   * [Requires Login] Favourite/Unfavourite a character\r\n   * @param {Number} id - Required. The ID tied to the AniList entry.\r\n   * @returns {Boolean} Returns true if added, false otherwise.\r\n   * @since 1.12.0\r\n   */\n  async favouriteChar(id) {\n    if (!id || typeof id !== \"number\") {\n      throw new Error(\"AniList ID is not provided!\");\n    }\n    const data = await this.util.send(`mutation ($charID: Int) {\n\t\t\t\tToggleFavourite(characterId: $charID) {\n\t\t\t\t  characters (page: 1, perPage: 25) {\n\t\t\t\t\tnodes { id }\n\t\t\t} } }`, {\n      charID: id\n    });\n    return data.ToggleFavourite.characters.nodes.some(e => {\n      if (e.id === id) {\n        return true;\n      }\n    });\n  }\n\n  /**\r\n   * Fetch a staff entry by its AniList ID or their name.\r\n   * @param { Number|String } id - Required. The ID can either be the AniList ID or the staff's name.\r\n   * @returns { StaffEntry }\r\n   * @since 1.0.0\r\n   */\n  staff(id) {\n    let queryVars = this.util.generateQueryHeaders(\"Staff\", id);\n    return this.util.send(queryVars[1] + `id name { english: full native alternative } language image { large medium }\n            description isFavourite siteUrl favourites\n            staffMedia { nodes { id title { romaji english native userPreferred } type } }\n            characters { nodes { id name { english: full } } } } }`, queryVars[0]);\n  }\n\n  /**\r\n   * [Requires Login] Favourite/Unfavourite a staff entry\r\n   * @param {Number} id - Required. The ID tied to the AniList entry.\r\n   * @returns {Boolean} Returns true if added, false otherwise.\r\n   * @since 1.12.0\r\n   */\n  async favouriteStaff(id) {\n    if (!id || typeof id !== \"number\") {\n      throw new Error(\"AniList ID is not provided!\");\n    }\n    const data = await this.util.send(`mutation ($staffID: Int) {\n\t\t\t\tToggleFavourite(staffId: $staffID) {\n\t\t\t\t  staff (page: 1, perPage: 25) { \n\t\t\t\t\tnodes { id } \n\t\t\t} } }`, {\n      staffID: id\n    });\n    return data.ToggleFavourite.staff.nodes.some(e => {\n      if (e.id === id) {\n        return true;\n      }\n    });\n  }\n}\nmodule.exports = People;","map":{"version":3,"names":["People","constructor","utilities","util","character","id","queryVars","generateQueryHeaders","send","favouriteChar","Error","data","charID","ToggleFavourite","characters","nodes","some","e","staff","favouriteStaff","staffID","module","exports"],"sources":["C:/Users/Ethan Liu/Desktop/repos/lightnovel-react/node_modules/anilist-node/lib/people.js"],"sourcesContent":["/**\r\n * Access AniList's characters and staff data.\r\n * @since 1.0.0\r\n * @memberof AniList\r\n */\r\nclass People {\r\n\t/**\r\n\t * @description This constructor is meant for internal use and is apart of initializing. You cannot access this\r\n\t * through the AniList class and are not expect to.\r\n\t * @param { Utilities } utilities - The AniList Utilities class.\r\n\t * @hideconstructor\r\n\t */\r\n\tconstructor(utilities) {\r\n\t\tthis.util = utilities;\r\n\t}\r\n\r\n\t/**\r\n\t * Fetch a character entry by its AniList ID.\r\n\t * @param { Number|String } id - Required. The ID tied to the AniList entry.\r\n\t * @returns { CharacterEntry }\r\n\t * @since 1.0.0\r\n\t */\r\n\tcharacter(id) {\r\n\t\tlet queryVars = this.util.generateQueryHeaders(\"Character\", id);\r\n\r\n\t\treturn this.util.send(\r\n\t\t\tqueryVars[1] +\r\n\t\t\t\t`id name { english: full native alternative } image { large medium } \r\n        description isFavourite favourites siteUrl \r\n        media { nodes { id title { romaji english native userPreferred } type } } } }`,\r\n\t\t\tqueryVars[0]\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * [Requires Login] Favourite/Unfavourite a character\r\n\t * @param {Number} id - Required. The ID tied to the AniList entry.\r\n\t * @returns {Boolean} Returns true if added, false otherwise.\r\n\t * @since 1.12.0\r\n\t */\r\n\tasync favouriteChar(id) {\r\n\t\tif (!id || typeof id !== \"number\") {\r\n\t\t\tthrow new Error(\"AniList ID is not provided!\");\r\n\t\t}\r\n\r\n\t\tconst data = await this.util.send(\r\n\t\t\t`mutation ($charID: Int) {\r\n\t\t\t\tToggleFavourite(characterId: $charID) {\r\n\t\t\t\t  characters (page: 1, perPage: 25) {\r\n\t\t\t\t\tnodes { id }\r\n\t\t\t} } }`,\r\n\t\t\t{ charID: id }\r\n\t\t);\r\n\r\n\t\treturn data.ToggleFavourite.characters.nodes.some((e) => {\r\n\t\t\tif (e.id === id) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Fetch a staff entry by its AniList ID or their name.\r\n\t * @param { Number|String } id - Required. The ID can either be the AniList ID or the staff's name.\r\n\t * @returns { StaffEntry }\r\n\t * @since 1.0.0\r\n\t */\r\n\tstaff(id) {\r\n\t\tlet queryVars = this.util.generateQueryHeaders(\"Staff\", id);\r\n\r\n\t\treturn this.util.send(\r\n\t\t\tqueryVars[1] +\r\n\t\t\t\t`id name { english: full native alternative } language image { large medium }\r\n            description isFavourite siteUrl favourites\r\n            staffMedia { nodes { id title { romaji english native userPreferred } type } }\r\n            characters { nodes { id name { english: full } } } } }`,\r\n\t\t\tqueryVars[0]\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * [Requires Login] Favourite/Unfavourite a staff entry\r\n\t * @param {Number} id - Required. The ID tied to the AniList entry.\r\n\t * @returns {Boolean} Returns true if added, false otherwise.\r\n\t * @since 1.12.0\r\n\t */\r\n\tasync favouriteStaff(id) {\r\n\t\tif (!id || typeof id !== \"number\") {\r\n\t\t\tthrow new Error(\"AniList ID is not provided!\");\r\n\t\t}\r\n\r\n\t\tconst data = await this.util.send(\r\n\t\t\t`mutation ($staffID: Int) {\r\n\t\t\t\tToggleFavourite(staffId: $staffID) {\r\n\t\t\t\t  staff (page: 1, perPage: 25) { \r\n\t\t\t\t\tnodes { id } \r\n\t\t\t} } }`,\r\n\t\t\t{ staffID: id }\r\n\t\t);\r\n\r\n\t\treturn data.ToggleFavourite.staff.nodes.some((e) => {\r\n\t\t\tif (e.id === id) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n}\r\n\r\nmodule.exports = People;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,MAAMA,MAAM,CAAC;EACZ;AACD;AACA;AACA;AACA;AACA;EACCC,WAAW,CAACC,SAAS,EAAE;IACtB,IAAI,CAACC,IAAI,GAAGD,SAAS;EACtB;;EAEA;AACD;AACA;AACA;AACA;AACA;EACCE,SAAS,CAACC,EAAE,EAAE;IACb,IAAIC,SAAS,GAAG,IAAI,CAACH,IAAI,CAACI,oBAAoB,CAAC,WAAW,EAAEF,EAAE,CAAC;IAE/D,OAAO,IAAI,CAACF,IAAI,CAACK,IAAI,CACpBF,SAAS,CAAC,CAAC,CAAC,GACV;AACL;AACA,sFAAsF,EACnFA,SAAS,CAAC,CAAC,CAAC,CACZ;EACF;;EAEA;AACD;AACA;AACA;AACA;AACA;EACC,MAAMG,aAAa,CAACJ,EAAE,EAAE;IACvB,IAAI,CAACA,EAAE,IAAI,OAAOA,EAAE,KAAK,QAAQ,EAAE;MAClC,MAAM,IAAIK,KAAK,CAAC,6BAA6B,CAAC;IAC/C;IAEA,MAAMC,IAAI,GAAG,MAAM,IAAI,CAACR,IAAI,CAACK,IAAI,CAC/B;AACJ;AACA;AACA;AACA,SAAS,EACN;MAAEI,MAAM,EAAEP;IAAG,CAAC,CACd;IAED,OAAOM,IAAI,CAACE,eAAe,CAACC,UAAU,CAACC,KAAK,CAACC,IAAI,CAAEC,CAAC,IAAK;MACxD,IAAIA,CAAC,CAACZ,EAAE,KAAKA,EAAE,EAAE;QAChB,OAAO,IAAI;MACZ;IACD,CAAC,CAAC;EACH;;EAEA;AACD;AACA;AACA;AACA;AACA;EACCa,KAAK,CAACb,EAAE,EAAE;IACT,IAAIC,SAAS,GAAG,IAAI,CAACH,IAAI,CAACI,oBAAoB,CAAC,OAAO,EAAEF,EAAE,CAAC;IAE3D,OAAO,IAAI,CAACF,IAAI,CAACK,IAAI,CACpBF,SAAS,CAAC,CAAC,CAAC,GACV;AACL;AACA;AACA,mEAAmE,EAChEA,SAAS,CAAC,CAAC,CAAC,CACZ;EACF;;EAEA;AACD;AACA;AACA;AACA;AACA;EACC,MAAMa,cAAc,CAACd,EAAE,EAAE;IACxB,IAAI,CAACA,EAAE,IAAI,OAAOA,EAAE,KAAK,QAAQ,EAAE;MAClC,MAAM,IAAIK,KAAK,CAAC,6BAA6B,CAAC;IAC/C;IAEA,MAAMC,IAAI,GAAG,MAAM,IAAI,CAACR,IAAI,CAACK,IAAI,CAC/B;AACJ;AACA;AACA;AACA,SAAS,EACN;MAAEY,OAAO,EAAEf;IAAG,CAAC,CACf;IAED,OAAOM,IAAI,CAACE,eAAe,CAACK,KAAK,CAACH,KAAK,CAACC,IAAI,CAAEC,CAAC,IAAK;MACnD,IAAIA,CAAC,CAACZ,EAAE,KAAKA,EAAE,EAAE;QAChB,OAAO,IAAI;MACZ;IACD,CAAC,CAAC;EACH;AACD;AAEAgB,MAAM,CAACC,OAAO,GAAGtB,MAAM"},"metadata":{},"sourceType":"script","externalDependencies":[]}