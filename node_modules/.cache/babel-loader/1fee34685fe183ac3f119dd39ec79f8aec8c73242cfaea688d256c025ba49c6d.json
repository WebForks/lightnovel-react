{"ast":null,"code":"const {\n  UserProfileQuery,\n  UserStatsQuery,\n  UserUpdateQuery,\n  ListActivityQuery,\n  TextActivityQuery,\n  MessageActivityQuery\n} = require(\"./consts\");\n\n/**\r\n * Access AniList's user data.\r\n * @since 1.0.0\r\n * @memberof AniList\r\n */\nclass User {\n  /**\r\n   * @description This constructor is meant for internal use and is apart of initializing. You cannot access this\r\n   * through the AniList class and are not expect to.\r\n   * @param { Utilites } utilities - The AniList Utilities class.\r\n   * @hideconstructor\r\n   */\n  constructor(utilities) {\n    this.util = utilities;\n  }\n\n  /**\r\n   * Fetch a user's AniList basic profile.\r\n   * @param { Number | String } user - Required. Can either be the username or the AniList ID.\r\n   * @returns { UserProfile }\r\n   * @since 1.0.0\r\n   */\n  profile(user) {\n    let queryVars = this.util.generateQueryHeaders(\"User\", user);\n    return this.util.send(`${queryVars[1]}${UserProfileQuery}}}`, queryVars[0]);\n  }\n\n  /**\r\n   * Fetch a user's AniList stats.\r\n   * @param { Number | String } user - Required. Can either be the username or the AniList ID.\r\n   * @returns { UserStats }\r\n   * @since 1.3.0\r\n   */\n  stats(user) {\n    let queryVars = this.util.generateQueryHeaders(\"User\", user);\n    return this.util.send(`${queryVars[1]}${UserStatsQuery}}}`, queryVars[0]);\n  }\n\n  /**\r\n   * Fetch a user's AniList profile, basic and stats.\r\n   * @param { Number | String } user - Required. Can either be the username or the AniList ID.\r\n   * @returns { Object } Returns all keys within {@link UserProfile} and {@link UserStats}. UserStats are found under the statistics key.\r\n   * @since 1.0.0\r\n   */\n  all(user) {\n    let queryVars = this.util.generateQueryHeaders(\"User\", user);\n    return this.util.send(`${queryVars[1]}${UserProfileQuery} ${UserStatsQuery}}}`, queryVars[0]);\n  }\n\n  /**\r\n   * Fetch recent activity from a user.\r\n   * @param {Number} user - Required. Needs to be the user's AniList ID.\r\n   * @returns { Object[] } Returns the 25 most recent activities of the user. Contains any number of\r\n   * {@link ListActivity}, {@link TextActivity}, {@link MessageActivity}. All of which are identifyable by the type key.\r\n   *\r\n   * @since 1.6.0\r\n   */\n  getRecentActivity(user) {\n    if (typeof user !== \"number\") {\n      throw new Error(\"Term does not match the required types!\");\n    }\n    return this.util.send(`query ($page: Int, $perPage: Int, $user: Int) {\n            Page (page: $page, perPage: $perPage) { pageInfo { total currentPage lastPage hasNextPage perPage } \n            activities(userId: $user, sort:ID_DESC) {\n                ... on ListActivity { ${ListActivityQuery} }\n                ... on TextActivity { ${TextActivityQuery} }\n                ... on MessageActivity { ${MessageActivityQuery} }\n            } } }`, {\n      user: user,\n      page: 1,\n      perPage: 25\n    });\n  }\n\n  /**\r\n   * Fetch profile information on the currently authorized user.\r\n   * @returns { UserProfile }\r\n   *\r\n   * @since 1.8.0\r\n   */\n  getAuthorized() {\n    if (!this.util.key) {\n      throw new Error(\"There is no current authorized user!\");\n    }\n    return this.util.send(`query{Viewer{${UserProfileQuery}}}`, {});\n  }\n\n  /**\r\n   * [Requires Login] Update user settings\r\n   * @param {UserOptionsInput} options\r\n   * @returns {UserOptions}\r\n   *\r\n   * @since 1.10.0\r\n   */\n  async update(options) {\n    if (!options || Object.keys(options).length === 0) {\n      throw new Error(\"Options were not provided for updating user!\");\n    }\n    const data = await this.util.send(UserUpdateQuery, options);\n    return data.updateUser;\n  }\n\n  /**\r\n   * [Requires Login] Follow/Unfollow a user\r\n   * @param {Number} userID - The user ID of the account to follow\r\n   * @returns {Boolean} True if following, false otherwise.\r\n   *\r\n   * @since 1.12.0\r\n   */\n  async follow(userID) {\n    if (typeof userID !== \"number\") {\n      throw new Error(\"userID is not a number type.\");\n    }\n    return this.util.send(`mutation ($userID: Int) { ToggleFollow(userId: $userID) { isFollowing } }`, {\n      userID: userID\n    }).then(data => {\n      if (Array.isArray(data)) {\n        return data;\n      }\n      return data.ToggleFollow.isFollowing;\n    });\n  }\n}\nmodule.exports = User;","map":{"version":3,"names":["UserProfileQuery","UserStatsQuery","UserUpdateQuery","ListActivityQuery","TextActivityQuery","MessageActivityQuery","require","User","constructor","utilities","util","profile","user","queryVars","generateQueryHeaders","send","stats","all","getRecentActivity","Error","page","perPage","getAuthorized","key","update","options","Object","keys","length","data","updateUser","follow","userID","then","Array","isArray","ToggleFollow","isFollowing","module","exports"],"sources":["C:/Users/Ethan Liu/Desktop/repos/lightnovel-react/node_modules/anilist-node/lib/user.js"],"sourcesContent":["const {\r\n\tUserProfileQuery,\r\n\tUserStatsQuery,\r\n\tUserUpdateQuery,\r\n\tListActivityQuery,\r\n\tTextActivityQuery,\r\n\tMessageActivityQuery\r\n} = require(\"./consts\");\r\n\r\n/**\r\n * Access AniList's user data.\r\n * @since 1.0.0\r\n * @memberof AniList\r\n */\r\nclass User {\r\n\t/**\r\n\t * @description This constructor is meant for internal use and is apart of initializing. You cannot access this\r\n\t * through the AniList class and are not expect to.\r\n\t * @param { Utilites } utilities - The AniList Utilities class.\r\n\t * @hideconstructor\r\n\t */\r\n\tconstructor(utilities) {\r\n\t\tthis.util = utilities;\r\n\t}\r\n\r\n\t/**\r\n\t * Fetch a user's AniList basic profile.\r\n\t * @param { Number | String } user - Required. Can either be the username or the AniList ID.\r\n\t * @returns { UserProfile }\r\n\t * @since 1.0.0\r\n\t */\r\n\tprofile(user) {\r\n\t\tlet queryVars = this.util.generateQueryHeaders(\"User\", user);\r\n\r\n\t\treturn this.util.send(`${queryVars[1]}${UserProfileQuery}}}`, queryVars[0]);\r\n\t}\r\n\r\n\t/**\r\n\t * Fetch a user's AniList stats.\r\n\t * @param { Number | String } user - Required. Can either be the username or the AniList ID.\r\n\t * @returns { UserStats }\r\n\t * @since 1.3.0\r\n\t */\r\n\tstats(user) {\r\n\t\tlet queryVars = this.util.generateQueryHeaders(\"User\", user);\r\n\t\treturn this.util.send(`${queryVars[1]}${UserStatsQuery}}}`, queryVars[0]);\r\n\t}\r\n\r\n\t/**\r\n\t * Fetch a user's AniList profile, basic and stats.\r\n\t * @param { Number | String } user - Required. Can either be the username or the AniList ID.\r\n\t * @returns { Object } Returns all keys within {@link UserProfile} and {@link UserStats}. UserStats are found under the statistics key.\r\n\t * @since 1.0.0\r\n\t */\r\n\tall(user) {\r\n\t\tlet queryVars = this.util.generateQueryHeaders(\"User\", user);\r\n\t\treturn this.util.send(`${queryVars[1]}${UserProfileQuery} ${UserStatsQuery}}}`, queryVars[0]);\r\n\t}\r\n\r\n\t/**\r\n\t * Fetch recent activity from a user.\r\n\t * @param {Number} user - Required. Needs to be the user's AniList ID.\r\n\t * @returns { Object[] } Returns the 25 most recent activities of the user. Contains any number of\r\n\t * {@link ListActivity}, {@link TextActivity}, {@link MessageActivity}. All of which are identifyable by the type key.\r\n\t *\r\n\t * @since 1.6.0\r\n\t */\r\n\tgetRecentActivity(user) {\r\n\t\tif (typeof user !== \"number\") {\r\n\t\t\tthrow new Error(\"Term does not match the required types!\");\r\n\t\t}\r\n\r\n\t\treturn this.util.send(\r\n\t\t\t`query ($page: Int, $perPage: Int, $user: Int) {\r\n            Page (page: $page, perPage: $perPage) { pageInfo { total currentPage lastPage hasNextPage perPage } \r\n            activities(userId: $user, sort:ID_DESC) {\r\n                ... on ListActivity { ${ListActivityQuery} }\r\n                ... on TextActivity { ${TextActivityQuery} }\r\n                ... on MessageActivity { ${MessageActivityQuery} }\r\n            } } }`,\r\n\t\t\t{ user: user, page: 1, perPage: 25 }\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Fetch profile information on the currently authorized user.\r\n\t * @returns { UserProfile }\r\n\t *\r\n\t * @since 1.8.0\r\n\t */\r\n\tgetAuthorized() {\r\n\t\tif (!this.util.key) {\r\n\t\t\tthrow new Error(\"There is no current authorized user!\");\r\n\t\t}\r\n\r\n\t\treturn this.util.send(`query{Viewer{${UserProfileQuery}}}`, {});\r\n\t}\r\n\r\n\t/**\r\n\t * [Requires Login] Update user settings\r\n\t * @param {UserOptionsInput} options\r\n\t * @returns {UserOptions}\r\n\t *\r\n\t * @since 1.10.0\r\n\t */\r\n\tasync update(options) {\r\n\t\tif (!options || Object.keys(options).length === 0) {\r\n\t\t\tthrow new Error(\"Options were not provided for updating user!\");\r\n\t\t}\r\n\r\n\t\tconst data = await this.util.send(UserUpdateQuery, options);\r\n\t\treturn data.updateUser;\r\n\t}\r\n\r\n\t/**\r\n\t * [Requires Login] Follow/Unfollow a user\r\n\t * @param {Number} userID - The user ID of the account to follow\r\n\t * @returns {Boolean} True if following, false otherwise.\r\n\t *\r\n\t * @since 1.12.0\r\n\t */\r\n\tasync follow(userID) {\r\n\t\tif (typeof userID !== \"number\") {\r\n\t\t\tthrow new Error(\"userID is not a number type.\");\r\n\t\t}\r\n\r\n\t\treturn this.util\r\n\t\t\t.send(`mutation ($userID: Int) { ToggleFollow(userId: $userID) { isFollowing } }`, {\r\n\t\t\t\tuserID: userID\r\n\t\t\t})\r\n\t\t\t.then((data) => {\r\n\t\t\t\tif (Array.isArray(data)) {\r\n\t\t\t\t\treturn data;\r\n\t\t\t\t}\r\n\t\t\t\treturn data.ToggleFollow.isFollowing;\r\n\t\t\t});\r\n\t}\r\n}\r\n\r\nmodule.exports = User;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}